package com.smartreader.service.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.smartreader.service.zyNet.down.ZYDownEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZYDOWN_ENTITY".
*/
public class ZYDownEntityDao extends AbstractDao<ZYDownEntity, String> {

    public static final String TABLENAME = "ZYDOWN_ENTITY";

    /**
     * Properties of entity ZYDownEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SavePath = new Property(0, String.class, "savePath", false, "SAVE_PATH");
        public final static Property Total = new Property(1, long.class, "total", false, "TOTAL");
        public final static Property Current = new Property(2, long.class, "current", false, "CURRENT");
        public final static Property ConnectonTime = new Property(3, int.class, "connectonTime", false, "CONNECTON_TIME");
        public final static Property StateValue = new Property(4, int.class, "stateValue", false, "STATE_VALUE");
        public final static Property Url = new Property(5, String.class, "url", true, "URL");
    }


    public ZYDownEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ZYDownEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZYDOWN_ENTITY\" (" + //
                "\"SAVE_PATH\" TEXT," + // 0: savePath
                "\"TOTAL\" INTEGER NOT NULL ," + // 1: total
                "\"CURRENT\" INTEGER NOT NULL ," + // 2: current
                "\"CONNECTON_TIME\" INTEGER NOT NULL ," + // 3: connectonTime
                "\"STATE_VALUE\" INTEGER NOT NULL ," + // 4: stateValue
                "\"URL\" TEXT PRIMARY KEY NOT NULL );"); // 5: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZYDOWN_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZYDownEntity entity) {
        stmt.clearBindings();
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(1, savePath);
        }
        stmt.bindLong(2, entity.getTotal());
        stmt.bindLong(3, entity.getCurrent());
        stmt.bindLong(4, entity.getConnectonTime());
        stmt.bindLong(5, entity.getStateValue());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZYDownEntity entity) {
        stmt.clearBindings();
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(1, savePath);
        }
        stmt.bindLong(2, entity.getTotal());
        stmt.bindLong(3, entity.getCurrent());
        stmt.bindLong(4, entity.getConnectonTime());
        stmt.bindLong(5, entity.getStateValue());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
    }    

    @Override
    public ZYDownEntity readEntity(Cursor cursor, int offset) {
        ZYDownEntity entity = new ZYDownEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // savePath
            cursor.getLong(offset + 1), // total
            cursor.getLong(offset + 2), // current
            cursor.getInt(offset + 3), // connectonTime
            cursor.getInt(offset + 4), // stateValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZYDownEntity entity, int offset) {
        entity.setSavePath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTotal(cursor.getLong(offset + 1));
        entity.setCurrent(cursor.getLong(offset + 2));
        entity.setConnectonTime(cursor.getInt(offset + 3));
        entity.setStateValue(cursor.getInt(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ZYDownEntity entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(ZYDownEntity entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZYDownEntity entity) {
        return entity.getUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
