package com.qudiandu.smartreader.service.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qudiandu.smartreader.ui.main.model.bean.SRBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SRBOOK".
*/
public class SRBookDao extends AbstractDao<SRBook, String> {

    public static final String TABLENAME = "SRBOOK";

    /**
     * Properties of entity SRBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Book_id = new Property(0, String.class, "book_id", true, "BOOK_ID");
        public final static Property Class_id = new Property(1, int.class, "class_id", false, "CLASS_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Grade_id = new Property(3, String.class, "grade_id", false, "GRADE_ID");
        public final static Property Pic = new Property(4, String.class, "pic", false, "PIC");
        public final static Property Grade = new Property(5, String.class, "grade", false, "GRADE");
        public final static Property Zip = new Property(6, String.class, "zip", false, "ZIP");
        public final static Property Update_time = new Property(7, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property SavePath = new Property(8, String.class, "savePath", false, "SAVE_PATH");
        public final static Property Total = new Property(9, long.class, "total", false, "TOTAL");
        public final static Property Current = new Property(10, long.class, "current", false, "CURRENT");
        public final static Property ConnectonTime = new Property(11, int.class, "connectonTime", false, "CONNECTON_TIME");
        public final static Property StateValue = new Property(12, int.class, "stateValue", false, "STATE_VALUE");
        public final static Property LastPageIndex = new Property(13, int.class, "lastPageIndex", false, "LAST_PAGE_INDEX");
    }


    public SRBookDao(DaoConfig config) {
        super(config);
    }
    
    public SRBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SRBOOK\" (" + //
                "\"BOOK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: book_id
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 1: class_id
                "\"NAME\" TEXT," + // 2: name
                "\"GRADE_ID\" TEXT," + // 3: grade_id
                "\"PIC\" TEXT," + // 4: pic
                "\"GRADE\" TEXT," + // 5: grade
                "\"ZIP\" TEXT," + // 6: zip
                "\"UPDATE_TIME\" TEXT," + // 7: update_time
                "\"SAVE_PATH\" TEXT," + // 8: savePath
                "\"TOTAL\" INTEGER NOT NULL ," + // 9: total
                "\"CURRENT\" INTEGER NOT NULL ," + // 10: current
                "\"CONNECTON_TIME\" INTEGER NOT NULL ," + // 11: connectonTime
                "\"STATE_VALUE\" INTEGER NOT NULL ," + // 12: stateValue
                "\"LAST_PAGE_INDEX\" INTEGER NOT NULL );"); // 13: lastPageIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SRBOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SRBook entity) {
        stmt.clearBindings();
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(1, book_id);
        }
        stmt.bindLong(2, entity.getClass_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String grade_id = entity.getGrade_id();
        if (grade_id != null) {
            stmt.bindString(4, grade_id);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(6, grade);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(7, zip);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(8, update_time);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(9, savePath);
        }
        stmt.bindLong(10, entity.getTotal());
        stmt.bindLong(11, entity.getCurrent());
        stmt.bindLong(12, entity.getConnectonTime());
        stmt.bindLong(13, entity.getStateValue());
        stmt.bindLong(14, entity.getLastPageIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SRBook entity) {
        stmt.clearBindings();
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(1, book_id);
        }
        stmt.bindLong(2, entity.getClass_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String grade_id = entity.getGrade_id();
        if (grade_id != null) {
            stmt.bindString(4, grade_id);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(6, grade);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(7, zip);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(8, update_time);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(9, savePath);
        }
        stmt.bindLong(10, entity.getTotal());
        stmt.bindLong(11, entity.getCurrent());
        stmt.bindLong(12, entity.getConnectonTime());
        stmt.bindLong(13, entity.getStateValue());
        stmt.bindLong(14, entity.getLastPageIndex());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SRBook readEntity(Cursor cursor, int offset) {
        SRBook entity = new SRBook( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // book_id
            cursor.getInt(offset + 1), // class_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // grade_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // grade
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zip
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // update_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // savePath
            cursor.getLong(offset + 9), // total
            cursor.getLong(offset + 10), // current
            cursor.getInt(offset + 11), // connectonTime
            cursor.getInt(offset + 12), // stateValue
            cursor.getInt(offset + 13) // lastPageIndex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SRBook entity, int offset) {
        entity.setBook_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setClass_id(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGrade_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGrade(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZip(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdate_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSavePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotal(cursor.getLong(offset + 9));
        entity.setCurrent(cursor.getLong(offset + 10));
        entity.setConnectonTime(cursor.getInt(offset + 11));
        entity.setStateValue(cursor.getInt(offset + 12));
        entity.setLastPageIndex(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SRBook entity, long rowId) {
        return entity.getBook_id();
    }
    
    @Override
    public String getKey(SRBook entity) {
        if(entity != null) {
            return entity.getBook_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SRBook entity) {
        return entity.getBook_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
