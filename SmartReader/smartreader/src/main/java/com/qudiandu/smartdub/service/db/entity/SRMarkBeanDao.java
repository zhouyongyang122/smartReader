package com.qudiandu.smartdub.service.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qudiandu.smartdub.ui.dubbing.model.bean.SRMarkBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SRMARK_BEAN".
*/
public class SRMarkBeanDao extends AbstractDao<SRMarkBean, String> {

    public static final String TABLENAME = "SRMARK_BEAN";

    /**
     * Properties of entity SRMarkBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mark_id = new Property(0, String.class, "mark_id", true, "MARK_ID");
        public final static Property Score = new Property(1, int.class, "score", false, "SCORE");
        public final static Property AudioTime = new Property(2, long.class, "audioTime", false, "AUDIO_TIME");
        public final static Property AudioPath = new Property(3, String.class, "audioPath", false, "AUDIO_PATH");
        public final static Property Share_url = new Property(4, String.class, "share_url", false, "SHARE_URL");
        public final static Property Show_track_id = new Property(5, String.class, "show_track_id", false, "SHOW_TRACK_ID");
        public final static Property JsonValue = new Property(6, String.class, "jsonValue", false, "JSON_VALUE");
    }


    public SRMarkBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SRMarkBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SRMARK_BEAN\" (" + //
                "\"MARK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: mark_id
                "\"SCORE\" INTEGER NOT NULL ," + // 1: score
                "\"AUDIO_TIME\" INTEGER NOT NULL ," + // 2: audioTime
                "\"AUDIO_PATH\" TEXT," + // 3: audioPath
                "\"SHARE_URL\" TEXT," + // 4: share_url
                "\"SHOW_TRACK_ID\" TEXT," + // 5: show_track_id
                "\"JSON_VALUE\" TEXT);"); // 6: jsonValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SRMARK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SRMarkBean entity) {
        stmt.clearBindings();
 
        String mark_id = entity.getMark_id();
        if (mark_id != null) {
            stmt.bindString(1, mark_id);
        }
        stmt.bindLong(2, entity.getScore());
        stmt.bindLong(3, entity.getAudioTime());
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(4, audioPath);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String show_track_id = entity.getShow_track_id();
        if (show_track_id != null) {
            stmt.bindString(6, show_track_id);
        }
 
        String jsonValue = entity.getJsonValue();
        if (jsonValue != null) {
            stmt.bindString(7, jsonValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SRMarkBean entity) {
        stmt.clearBindings();
 
        String mark_id = entity.getMark_id();
        if (mark_id != null) {
            stmt.bindString(1, mark_id);
        }
        stmt.bindLong(2, entity.getScore());
        stmt.bindLong(3, entity.getAudioTime());
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(4, audioPath);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String show_track_id = entity.getShow_track_id();
        if (show_track_id != null) {
            stmt.bindString(6, show_track_id);
        }
 
        String jsonValue = entity.getJsonValue();
        if (jsonValue != null) {
            stmt.bindString(7, jsonValue);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SRMarkBean readEntity(Cursor cursor, int offset) {
        SRMarkBean entity = new SRMarkBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mark_id
            cursor.getInt(offset + 1), // score
            cursor.getLong(offset + 2), // audioTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // audioPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // share_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // show_track_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // jsonValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SRMarkBean entity, int offset) {
        entity.setMark_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setScore(cursor.getInt(offset + 1));
        entity.setAudioTime(cursor.getLong(offset + 2));
        entity.setAudioPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShare_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShow_track_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJsonValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SRMarkBean entity, long rowId) {
        return entity.getMark_id();
    }
    
    @Override
    public String getKey(SRMarkBean entity) {
        if(entity != null) {
            return entity.getMark_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SRMarkBean entity) {
        return entity.getMark_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
