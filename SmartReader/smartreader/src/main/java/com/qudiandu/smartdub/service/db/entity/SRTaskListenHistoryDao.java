package com.qudiandu.smartdub.service.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qudiandu.smartdub.ui.task.model.bean.SRTaskListenHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SRTASK_LISTEN_HISTORY".
*/
public class SRTaskListenHistoryDao extends AbstractDao<SRTaskListenHistory, String> {

    public static final String TABLENAME = "SRTASK_LISTEN_HISTORY";

    /**
     * Properties of entity SRTaskListenHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ListenId = new Property(0, String.class, "listenId", true, "LISTEN_ID");
        public final static Property ListenTime = new Property(1, int.class, "listenTime", false, "LISTEN_TIME");
    }


    public SRTaskListenHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public SRTaskListenHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SRTASK_LISTEN_HISTORY\" (" + //
                "\"LISTEN_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: listenId
                "\"LISTEN_TIME\" INTEGER NOT NULL );"); // 1: listenTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SRTASK_LISTEN_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SRTaskListenHistory entity) {
        stmt.clearBindings();
 
        String listenId = entity.getListenId();
        if (listenId != null) {
            stmt.bindString(1, listenId);
        }
        stmt.bindLong(2, entity.getListenTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SRTaskListenHistory entity) {
        stmt.clearBindings();
 
        String listenId = entity.getListenId();
        if (listenId != null) {
            stmt.bindString(1, listenId);
        }
        stmt.bindLong(2, entity.getListenTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SRTaskListenHistory readEntity(Cursor cursor, int offset) {
        SRTaskListenHistory entity = new SRTaskListenHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // listenId
            cursor.getInt(offset + 1) // listenTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SRTaskListenHistory entity, int offset) {
        entity.setListenId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setListenTime(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SRTaskListenHistory entity, long rowId) {
        return entity.getListenId();
    }
    
    @Override
    public String getKey(SRTaskListenHistory entity) {
        if(entity != null) {
            return entity.getListenId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SRTaskListenHistory entity) {
        return entity.getListenId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
